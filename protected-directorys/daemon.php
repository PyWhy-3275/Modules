<?php
	use fruithost\Database;
	
	class ProtectedDirectorysDaemon {
		public function __construct() {
			$entries = $this->getEntries('AND
										`fh_protected_directorys`.`time_created` IS NULL
									AND
										`fh_protected_directorys`.`time_deleted` IS NULL');
										
			foreach($entries AS $entry) {
				print 'Create VHost Configuration for ' . $entry->id . PHP_EOL;
				
				$path = sprintf('%s%s%s', HOST_PATH, $entry->username, $entry->path);
				
				if(file_exists($path)) {
					$this->createConfiguration($entry, $path);
				}
			}
			
			$this->reloadApache();
		}
		
		protected function getEntries($sql = '') {
			return Database::fetch('SELECT
										`fh_protected_directorys`.*,
										`fh_users`.`username` AS `username`
									FROM
										`fh_protected_directorys`,
										`fh_users`
									WHERE
										`fh_users`.`id`=`fh_protected_directorys`.`user_id`
									' . $sql . '
									ORDER BY `fh_protected_directorys`.`id` ASC', []);
		}
		
		protected function createConfiguration($entry, $path) {
			$config = '# Generated by fruithost' . PHP_EOL;
			$config .= sprintf('DefineExternalAuth ProtectedDirectory pipe \'/usr/bin/php -q /etc/fruithost/modules/protected-directorys/auth.php %d\'', $entry->id) . PHP_EOL;
			$config .= PHP_EOL;
			$config .= sprintf('<Directory "%s">', $path) . PHP_EOL;
			$config .= TAB . 'AuthType Basic' . PHP_EOL;
			$config .= TAB . sprintf('AuthName "%s"', $entry->message) . PHP_EOL;
			$config .= TAB . 'AuthBasicProvider external' . PHP_EOL;
			$config .= TAB . 'AuthExternal ProtectedDirectory' . PHP_EOL;
			$config .= TAB . 'Require valid-user' . PHP_EOL;
			$config .= '</Directory>' . PHP_EOL;
			
			file_put_contents(sprintf('/etc/fruithost/config/apache2/vhosts/%s.%s.protected.conf', $entry->username, $entry->id), $config);
			
			Database::update('fh_protected_directorys', 'id', [
				'id'			=> $entry->id,
				'time_created'	=> date('Y-m-d H:i:s', time())
			]);
		}
		
		protected function reloadApache() {
			print shell_exec('service apache2 reload');
		}
	}
	
	new ProtectedDirectorysDaemon();
?>